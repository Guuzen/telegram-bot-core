#!/usr/bin/env php
<?php

/**
 * Usage: ./vendor/amphp/cluster/bin/cluster bin/web_hook
 */

use Amp\ByteStream\ResourceOutputStream;
use Amp\Cluster\Cluster;
use Amp\Log\StreamHandler;
use Amp\Loop;
use Amp\Success;
use Amp\Promise;
use Monolog\Logger;
use Psr\Log\LoggerInterface;
use Psr\Log\LogLevel;
use ServiceBus\TelegramBot\EntryPoint\Configuration\WebHooksConfig;
use ServiceBus\TelegramBot\EntryPoint\EntryPoint;
use ServiceBus\TelegramBot\EntryPoint\Event\TelegramEvent;
use ServiceBus\TelegramBot\EntryPoint\TelegramEventBus;
use ServiceBus\TelegramBot\EntryPoint\TelegramEventProcessor;
use ServiceBus\TelegramBot\EntryPoint\TelegramUpdateDispatcher;
use ServiceBus\TelegramBot\TelegramCredentials;
use Symfony\Component\Dotenv\Dotenv;

include __DIR__ . '/../vendor/autoload.php';

(new Dotenv())->load(__DIR__ . '/../.env');

$logHandler = \Amp\Cluster\Cluster::isWorker()
    ? Cluster::createLogHandler()
    : new StreamHandler(new ResourceOutputStream(\STDOUT), LogLevel::INFO);

$logger      = new Logger('demo', [$logHandler]);
$credentials = TelegramCredentials::apiToken((string) \getenv('API_TOKEN'));
$config      = WebHooksConfig::create('https://google.com');

$listener = new class($logger) implements TelegramEventProcessor
{
    private $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    public function process(TelegramEvent $event): Promise
    {
        $this->logger->info('Event received: {eventType}', ['eventType' => \get_class($event)]);

        return new Success();
    }
};

$bus = new TelegramEventBus();
$bus->addListener(TelegramEvent::class, $listener);

$dispatcher = new TelegramUpdateDispatcher($bus, $logger);

$entryPoint = new EntryPoint($dispatcher, $logger);

Loop::run(
    static function() use ($credentials, $config, $entryPoint): \Generator
    {
        yield $entryPoint->run($credentials, $config);
    }
);
