#!/usr/bin/env php
<?php

/**
 * Usage: ./vendor/amphp/cluster/bin/cluster bin/web_hook
 */

use Amp\ByteStream\ResourceOutputStream;
use Amp\Cluster\Cluster;
use Amp\Delayed;
use Amp\Log\StreamHandler;
use Amp\Loop;
use Monolog\Logger;
use Psr\Log\LogLevel;
use ServiceBus\TelegramBot\EntryPoint\Configuration\WebHooksConfig;
use ServiceBus\TelegramBot\EntryPoint\EntryPoint;
use ServiceBus\TelegramBot\EntryPoint\TelegramUpdateDispatcher;
use ServiceBus\TelegramBot\TelegramCredentials;
use Symfony\Component\Dotenv\Dotenv;

include __DIR__ . '/../vendor/autoload.php';

(new Dotenv())->load(__DIR__ . '/../.env');

$logHandler = \Amp\Cluster\Cluster::isWorker()
    ? Cluster::createLogHandler()
    : new StreamHandler(new ResourceOutputStream(\STDOUT), LogLevel::INFO);

$logger      = new Logger('demo', [$logHandler]);
$credentials = TelegramCredentials::apiToken((string) \getenv('API_TOKEN'));
$config      = WebHooksConfig::create('https://google.com');

$dispatcher = new TelegramUpdateDispatcher();

$entryPoint = new EntryPoint($dispatcher, $logger);

Loop::onSignal(
    \SIGINT,
    static function(string $watcherId, int $signalId) use ($entryPoint, $logger): \Generator
    {
        $logger->info('A signal "{signalId}" was received', ['signalId' => $signalId]);

        yield $entryPoint->cancel();
        yield new Delayed(5000);

        Loop::stop();
    }
);

Loop::run(
    static function() use ($credentials, $config, $entryPoint): \Generator
    {
        yield $entryPoint->run($credentials, $config);
    }
);
